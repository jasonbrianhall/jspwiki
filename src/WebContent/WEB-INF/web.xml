<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- 
    JSPWiki - a JSP-based WikiWiki clone.

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.  
-->

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
        version="2.4">

   <description>
       JSPWiki is an open source JSP-based WikiClone.  It is licensed
       under the Apache 2.0 license.

       For more information, please come to http://www.jspwiki.org/
   </description>
   <display-name>JSPWiki</display-name>

   <!-- Resource bundle default location -->
   <context-param>
     <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
     <param-value>templates.default</param-value>
   </context-param>
   <!-- Look for ActionBean implementations in the JSPWiki "action" package.
        If you have custom WikiActionBeans you want JSPWiki to use, specify them
        here (comma-delimited). -->
   <context-param>
      <param-name>ActionResolver.Packages</param-name>
      <param-value>org.apache.wiki.action</param-value>
   </context-param>

   <!-- Configuration of the Stripes Filter. The Stripes MVC framework provides
         essential request routing, form processing and type conversion services
         for JSPWiki. -->
   <filter>
      <description>
         Configures the Stripes framework.
      </description>
      <display-name>Stripes Filter</display-name>
      <filter-name>StripesFilter</filter-name>
      <filter-class>net.sourceforge.stripes.controller.StripesFilter</filter-class>
      <!-- Tell Stripes to auto-discover custom extensions from the "ui.stripes"
           package. Extensions JSPWiki uses includes WikiActionBeanContext,
           WikiRuntimeConfiguration, WikiInterceptor and the various TypeConverter
           implementations for JSPWiki-specific types. -->
      <init-param>
         <param-name>Extension.Packages</param-name>
         <param-value>org.apache.wiki.ui.stripes</param-value>
      </init-param>
      <!-- We override Stripes' normal resource bundle to use ours instead. -->
      <init-param>
         <param-name>LocalizationBundleFactory.FieldNameBundle</param-name>
         <param-value>CoreResources</param-value>
      </init-param>
      <init-param>
         <param-name>LocalizationBundleFactory.ErrorMessageBundle</param-name>
         <param-value>CoreResources</param-value>
      </init-param>
      <init-param>
         <param-name>LocalePicker.Class</param-name>
         <param-value>org.apache.wiki.ui.stripes.PreferencesLocalePicker</param-value>
      </init-param>
      <!-- Library for parsing multi-part file uploads -->
      <init-param>
        <param-name>MultipartWrapper.Class</param-name>
        <param-value>net.sourceforge.stripes.controller.multipart.CommonsMultipartWrapper</param-value>
      </init-param>
      <!-- Exception handler -->
      <init-param>
        <param-name>ExceptionHandler.Class</param-name>
        <param-value>org.apache.wiki.ui.stripes.WikiExceptionHandler</param-value>
      </init-param>
   </filter>

   <filter>
      <description>Dynamically maps URLs to ActionBeans.</description>
      <display-name>Stripes Dynamic Mapping Filter</display-name>
      <filter-name>DynamicMappingFilter</filter-name>
      <filter-class>net.sourceforge.stripes.controller.DynamicMappingFilter</filter-class>
   </filter>

   <!--
      The StripesFilter and DynamicMappingFilter process all requests for JSPs and ActionBeans. 
   -->
   <filter-mapping>
       <filter-name>StripesFilter</filter-name>
       <url-pattern>*.jsp</url-pattern>
       <dispatcher>REQUEST</dispatcher>
   </filter-mapping>
   <filter-mapping>
      <filter-name>DynamicMappingFilter</filter-name>
      <url-pattern>/*</url-pattern>
      <dispatcher>REQUEST</dispatcher>
      <dispatcher>FORWARD</dispatcher>
      <dispatcher>INCLUDE</dispatcher>
   </filter-mapping>

   <!--
       HttpSessionListener used for managing WikiSessions.
   -->
   <listener>
      <listener-class>org.apache.wiki.auth.SessionMonitor</listener-class>
   </listener>
   
   <!--
       Now, let's define the XML-RPC interfaces.  You probably don't have to
       touch these.

       First, we'll define the standard XML-RPC interface.
     -->
   <servlet>
       <servlet-name>XMLRPC</servlet-name>
       <servlet-class>org.apache.wiki.xmlrpc.RPCServlet</servlet-class>       
       <init-param>
           <param-name>handler</param-name>
           <param-value>org.apache.wiki.xmlrpc.RPCHandler</param-value>
       </init-param>

       <init-param>
           <param-name>prefix</param-name>
           <param-value>wiki</param-value>
       </init-param>
   </servlet>

   <!--
       OK, this then defines that our UTF-8 -capable server.
     -->

   <servlet>
       <servlet-name>XMLRPC-UTF8</servlet-name>
       <servlet-class>org.apache.wiki.xmlrpc.RPCServlet</servlet-class>       
       <init-param>
           <param-name>handler</param-name>
           <param-value>org.apache.wiki.xmlrpc.RPCHandlerUTF8</param-value>
       </init-param>

       <init-param>
           <param-name>prefix</param-name>
           <param-value>wiki</param-value>
       </init-param>
   </servlet>

   <!-- JSON AJAX API -->
   <servlet>
       <servlet-name>org.jabsorb.JSONRPCServlet</servlet-name>
       <servlet-class>org.jabsorb.JSONRPCServlet</servlet-class>
   </servlet>

   <!-- Atom Publishing Protocol -->
   <servlet>
       <servlet-name>ATOM</servlet-name>
       <servlet-class>org.apache.wiki.rpc.atom.AtomAPIServlet</servlet-class>       
   </servlet>

   <!-- PLACEHOLDER FOR PRE-COMPILED JSP SERVLETS -->

   <!--
       And finally, let us tell the servlet container which
       URLs should correspond to which XML RPC servlet.
     -->

   <!-- By default, this is disabled.  If you want to enabled it,
        just uncomment the whole section. -->

   <!--  REMOVE ME TO ENABLE XML-RPC

   <servlet-mapping>
       <servlet-name>XMLRPC</servlet-name>
       <url-pattern>/RPC2/</url-pattern>
   </servlet-mapping>

   <servlet-mapping>
       <servlet-name>XMLRPC-UTF8</servlet-name>
       <url-pattern>/RPCU/</url-pattern>
   </servlet-mapping>

   <servlet-mapping>
       <servlet-name>ATOM</servlet-name>
       <url-pattern>/atom/*</url-pattern>
   </servlet-mapping>

   AND REMOVE ME TOO -->

   <servlet-mapping>
       <servlet-name>org.jabsorb.JSONRPCServlet</servlet-name>
       <url-pattern>/JSON-RPC</url-pattern>
   </servlet-mapping>

   <!-- Welcome file forwards to Wiki.jsp -->
   <welcome-file-list>
       <welcome-file>index.jsp</welcome-file>
   </welcome-file-list>
   
   <!-- Error pages -->
   <error-page>
     <error-code>403</error-code>
     <location>/templates/default/Forbidden.jsp</location>
   </error-page>

   <!--  REMOVE ME TO ENABLE JDBC DATABASE
   <resource-ref>
       <description>
           Resource reference to JNDI factory for the JDBCUserDatabase.
       </description>
       <res-ref-name>
           jdbc/UserDatabase
       </res-ref-name>
       <res-type>
           javax.sql.DataSource
       </res-type>
       <res-auth>
           Container
       </res-auth>
   </resource-ref>
   <resource-ref>
       <description>
           Resource reference to JNDI factory for the JDBCGroupDatabase.
       </description>
       <res-ref-name>
           jdbc/GroupDatabase
       </res-ref-name>
       <res-type>
           javax.sql.DataSource
       </res-type>
       <res-auth>
           Container
       </res-auth>
   </resource-ref>
   REMOVE ME TO ENABLE JDBC DATABASE  -->

   <!--  REMOVE ME TO ENABLE JAVAMAIL
   <resource-ref>
     <description>Resource reference to a container-managed JNDI JavaMail factory for sending e-mails.</description>
     <res-ref-name>mail/Session</res-ref-name>
     <res-type>javax.mail.Session</res-type>
     <res-auth>Container</res-auth>
   </resource-ref>
   REMOVE ME TO ENABLE JAVAMAIL  -->

   <!--  REMOVE ME TO ENABLE JCR REPOSITORY
   <resource-ref>
     <description>Resource reference to a container-managed JCR repository.</description>
     <res-ref-name>jcr/repository</res-ref-name>
     <res-type>javax.jcr.Repository</res-type>
     <res-auth>Container</res-auth>
   </resource-ref>
   REMOVE ME TO ENABLE JCR REPOSITORY  -->

   <!--
       CONTAINER-MANAGED AUTHENTICATION & AUTHORIZATION
    
       Here we define the users which are allowed to access JSPWiki.
       These restrictions cause the web container to apply further 
       contraints to the default security policy in jspwiki.policy,
       and should be suitable for a corporate intranet or public wiki.

       In particular, the restrictions below allow all users to
       read documents, but only Authenticated users can comment
       on or edit them (i.e., access the Edit.jsp page).
       Users with the role Admin are the only persons who can 
       delete pages. 

       To implement this policy, the container enforces two web
       resource constraints: one for the Administrator resources,
       and one for  Authenticated users. Note that the "role-name" 
       values are significant and should match the role names 
       retrieved by your web container's security realm. The roles 
       of "Admin" and "Authenticated" are assigned by the web 
       container at login time.

       For example, if you are using Tomcat's built-in "memory realm",
       you should edit the $CATALINA_HOME/conf/tomcat-users.xml file 
       and add the desired actual user accounts. Each user must possess
       one or both of the Admin or Authenticated roles. For other realm
       types, consult your web container's documentation.
       
       Alternatively, you could also replace all references to 
       "Authenticated" and "Admin" with role names that match those 
       returned by your container's security realm. We don't care
       either way, as long as they match.
       
       Note that accessing protected resources will cause your
       container to try to use SSL (default port for Tomcat is 8443)
       to secure the web session. This, of course, assumes your
       web container (or web server) is configured with SSL support.
       If you do not wish to use SSL, remove the "user-data-constraint"
       elements.
   -->

   <!--  REMOVE ME TO ENABLE CONTAINER-MANAGED AUTH
   
   <security-constraint>
       <web-resource-collection>
           <web-resource-name>Administrative Area</web-resource-name>
           <url-pattern>/Delete.jsp</url-pattern>
       </web-resource-collection>
       <auth-constraint>
           <role-name>Admin</role-name>
       </auth-constraint>
       <user-data-constraint>
           <transport-guarantee>CONFIDENTIAL</transport-guarantee>
       </user-data-constraint>
   </security-constraint>
      
   <security-constraint>
       <web-resource-collection>
           <web-resource-name>Authenticated area</web-resource-name>
           <url-pattern>/Edit.jsp</url-pattern>
           <url-pattern>/Comment.jsp</url-pattern>
           <url-pattern>/Login.jsp</url-pattern>
           <url-pattern>/NewGroup.jsp</url-pattern>
           <url-pattern>/Rename.jsp</url-pattern>
           <url-pattern>/Upload.jsp</url-pattern>
           <http-method>DELETE</http-method>
           <http-method>GET</http-method>
           <http-method>HEAD</http-method>
           <http-method>POST</http-method>
           <http-method>PUT</http-method>
       </web-resource-collection>

       <web-resource-collection>
           <web-resource-name>Read-only Area</web-resource-name>
           <url-pattern>/attach</url-pattern>
           <http-method>DELETE</http-method>
           <http-method>POST</http-method>
           <http-method>PUT</http-method>
       </web-resource-collection>

       <auth-constraint>
           <role-name>Admin</role-name>
           <role-name>Authenticated</role-name>
       </auth-constraint>

       <user-data-constraint>
           <transport-guarantee>CONFIDENTIAL</transport-guarantee>
       </user-data-constraint>
   </security-constraint>

   <login-config>
       <auth-method>FORM</auth-method>
       <form-login-config>
           <form-login-page>/templates/default/LoginForm.jsp</form-login-page>
           <form-error-page>/templates/default/LoginForm.jsp</form-error-page>
       </form-login-config>
   </login-config>

   <security-role>
       <description>
           This logical role includes all authenticated users
       </description>
       <role-name>Authenticated</role-name>
   </security-role>

   <security-role>
       <description>
           This logical role includes all administrative users
       </description>
       <role-name>Admin</role-name>
   </security-role>
   
   REMOVE ME TO ENABLE CONTAINER-MANAGED AUTH  -->
 
</web-app>
