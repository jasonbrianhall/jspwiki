<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.  
-->

<!--
    This is the Ant build file for the JSPWiki project.  It's
    in the process of getting replaced by the Maven pom.xml.
    To build:
    1.) run mvn clean install from Maven, which runs all unit
        tests and builds the WAR.
    2.) run mvn javadoc:javadoc to build the Javadocs in target/site
    3.) from Ant, run the dist target (to create the full distribution).
-->

<project name="JSPWiki" default="war" basedir=".">

  <!-- The location for the JAR file for the core JSPWiki classes -->
  <property name="jarfile" value="target/JSPWiki/WEB-INF/lib/jspwiki-2.9.2-SNAPSHOT.jar" />

  <!-- The location for the keystore used to sign the JAR; will be created if it doesn't exist. -->
  <property name="jks.keystore" value="${basedir}/etc/jspwiki.jks" />

  <!-- Define directies for the "ant dist target -->
  <property name="tmpdir" value="target/ant-dist/tmp" />
  <property name="release.dir" value="target/ant-dist/releases" />
  <property name="install.fulldir" value="${tmpdir}/install" />
	
  <!-- The directory where the SVN sources are checked out. -->
  <property name="install.src" value="${tmpdir}/svnsrc" />

  <!-- Define the SVN properties.  These are used when building the
       source distribution.  Normally, you shouldn't have to care about these.
   -->
  <property name="svn.repository" value="http://svn.apache.org/repos/asf/incubator/jspwiki" />
  <property name="svn.tag" value="trunk" />

  <!-- The prefix to use when reading environment variables -->
  <property environment="env" />

  <!-- ============================================================== -->

  <!--  Installation targets -->

  <!-- This target makes sure all the necessary directories exist
       for building the installation package. -->
  <target name="installinit">
    <mkdir dir="${install.fulldir}" />
    <delete dir="${install.src}" />
    <mkdir dir="${install.src}" />
    <delete dir="${release.dir}" />
    <mkdir dir="${release.dir}" />
  </target>

  <!--  Signs the JSPWiki JAR file with a self-issued digital certificate.
        This should only be needed when your JVM starts with a global security
        policy. By this we mean a standard J2SE policy that is set at JVM startup
      	using the -Djava.security.policy=/some/policy/file VM argument. If this
      	global policy file contains references to JSPWiki permission classes
      	(PagePermission, GroupPermission, etc) **and** you set it before JSPWiki
      	is loaded, **then** you must do four things:
      	  0) run this target (signjar)
      	  1) through 3) see below
  -->

  <target name="signjar" depends="sign-init" description="Signs jar: for use with global JVM security policies">
    <sign-jar jar="${jarfile}" />
    <echo>
  Congratulations -- you just signed your JAR file. We assume
  you did this because you want to create a global security
  policy for your entire JVM. That's fine, but please make
  sure you configure your JVM (and container) correctly.
  Normally, this means you should:

    1) Copy ${jarfile} to a place where its classes will be
       read at startup. (Example: for Tomcat, this is
       $CATALINA_HOME/common/lib)

    2) Copy the keystore from ${jks.keystore} to the same
       location as your global policy. (Example: Tomcat's
       policy is in $CATALINA_HOME/conf/catalina.policy,
       so you would copy it to $CATALINA_HOME/conf.)

    3) Add a reference to the keystore as the *first* line of
       the global policy. It should read

       keystore "jspwiki.jks";

       ... or something similar.

  If you have no idea what this is all about, we assume
  that you ran this target just for fun. In that case, we
  hope you enjoyed the experience.</echo>
  </target>

  <!--
       Here goes some nice Ant magic...  We build the source
       code archive by directly exporting all code from the SVN
       repository, and then zipping it to the temporary installation
       directory.

       NB: You must have the svn command line client available in
       your path before you attempt to run this task.
   -->
  <target name="srczip" depends="installinit"
          description="Builds source zip.">

  	<delete dir="${install.src}" />
  	
  	<exec executable="svn">
       <arg line="export ${svn.repository}/${svn.tag} &quot;${install.src}&quot;"/>
  	</exec>
  	
    <zip zipfile="${release.dir}/${ant.project.name}-src.zip">
        <zipfileset dir="${install.src}" prefix="${ant.project.name}-src" />
    </zip>

  </target>

  <!-- Creates a zip of all the core pages.  The file which determines
       whether a page is a core page or not is found in src/main/config/wikipages/.corepages -->

  <target name="corepageszip" depends="installinit">
    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_en.zip"
         basedir="src/main/config/wikipages/en" includesfile="src/main/config/wikipages/.corepages">
    </zip>
  
    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_fi.zip"
         basedir="src/main/config/wikipages/fi" includesfile="src/main/config/wikipages/.corepages">
    </zip>

    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_de.zip"
         basedir="src/main/config/wikipages/de">
    </zip>

    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_zh_CN.zip"
         basedir="src/main/config/wikipages/zh_CN">
    </zip>
  	
  	<zip zipfile="${install.fulldir}/${ant.project.name}-corepages_es.zip"
         basedir="src/main/config/wikipages/es" includesfile="src/main/config/wikipages/.corepages">
    </zip>
 
    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_nl.zip"
         basedir="src/main/config/wikipages/nl">
    </zip>

    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_fr.zip"
         basedir="src/main/config/wikipages/fr">
    </zip>

    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_it.zip"
         basedir="src/main/config/wikipages/it">
    </zip>

    <zip zipfile="${install.fulldir}/${ant.project.name}-corepages_pt_BR.zip"
         basedir="src/main/config/wikipages/pt_BR">
    </zip>
 
    <!-- Add other languages here -->
    
  </target>

  <!-- Creates a full ZIP file of all document files, ignoring any resources
       which start with a dot. -->

  <target name="documentzip" depends="installinit"
          description="Creates JSPWiki documentation zipfile">

    <zip zipfile="${install.fulldir}/${ant.project.name}-doc.zip">
        <zipfileset dir="src/main/config/doc" prefix="doc" />
        <zipfileset dir="target/site/apidocs" prefix="javadoc" />
        <zipfileset dir="src/main/config/wikipages" prefix="wikipages" excludes="**/.??*" />
    </zip>
  </target>

  <target name="version" 
          description="Reads the current code base's version string.">
    <java outputproperty="jspwiki.version" classname="org.apache.wiki.Release">
      <classpath>
        <pathelement location="target/classes"/>
      </classpath>
    </java>
  </target>

  <!-- Builds the entire distribution artifacts without checksums and signatures.

       We build both the WAR-file and the source zip, then
       copy in some useful files and zip the whole thing
       into the release directory.
    -->
  <target name="dist" depends="installinit,srczip,corepageszip,documentzip,version"
          description="Builds the entire distribution artifacts without checksums and signatures.">

    <!-- binary distribution -->
    <copy file="../ChangeLog"    todir="${install.fulldir}" />
    <copy file="../DISCLAIMER"   todir="${install.fulldir}" />
    <copy file="../LICENSE"      todir="${install.fulldir}" />
    <copy file="../NOTICE"       todir="${install.fulldir}" />
    <copy file="../README"       todir="${install.fulldir}" />
    <copy file="../ReleaseNotes" todir="${install.fulldir}" />
    <copy file="../UPGRADING"    todir="${install.fulldir}" />
    <copy file="target/JSPWiki.war"   todir="${install.fulldir}" />
    <zip zipfile="${release.dir}/${ant.project.name}-${jspwiki.version}-bin.zip">
      <zipfileset dir="${install.fulldir}" prefix="${ant.project.name}-bin" />
    </zip>

    <!-- source distribution -->
    <move file="${release.dir}/${ant.project.name}-src.zip"
        tofile="${release.dir}/${ant.project.name}-${jspwiki.version}-src.zip"/>

  </target>

  <!-- Nabbed from solr -->
  <macrodef name="sign-artifact" description="Signs an artifact.">
    <attribute name="input.file"/>
    <attribute name="output.file" default="@{input.file}.asc"/>
    <sequential>
      <echo>Signing @{input.file} Sig File: @{output.file}</echo>
      <exec executable="gpg">
        <arg value="--armor"/>
        <arg value="--output"/>
        <arg value="@{output.file}"/>
        <arg value="--detach-sig"/>
        <arg value="@{input.file}"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- Generate signatures and checksums for the distribution artifacts. -->
  <target name="signeddist" depends="dist" description="Generate signatures and checksums for the release artifacts.">

  	<echo>Generating checksums for the release artifacts.</echo>
    <checksum algorithm="MD5" fileext=".md5" format="MD5SUM" forceoverwrite="yes">
      <fileset dir="${release.dir}"><include name="*.zip"/></fileset>
    </checksum>
    <checksum algorithm="SHA" fileext=".sha1" format="MD5SUM" forceoverwrite="yes">
      <fileset dir="${release.dir}"><include name="*.zip"/></fileset>
    </checksum>
    <checksum algorithm="SHA-512" fileext=".sha512" format="MD5SUM" forceoverwrite="yes">
      <fileset dir="${release.dir}"><include name="*.zip"/></fileset>
    </checksum>

  	<sequential>
      <sign-artifact input.file="${release.dir}/${ant.project.name}-${jspwiki.version}-bin.zip" />
      <sign-artifact input.file="${release.dir}/${ant.project.name}-${jspwiki.version}-src.zip" />
    </sequential>

  </target>

  <!-- ============================================================== -->

  <!-- Targets for signing JAR files -->

  <!-- These targets collectively create a Java keystore for signing,
       and automate the jar-signing process.
  -->
  <target name="sign-init" depends="installinit,jks-init,jks-create,jks-password" />

  <target name="jks-init">
    <property name="jks.alias" value="jspwiki" />
    <available file="${jks.keystore}" property="jks.exists" />
  </target>

  <target name="jks-create" unless="jks.exists">
    <echo>
JSPWiki needs a digital certificate for code signing its JAR files.
Since you don't appear to have one, we need to generate a new certificate.
Once generated, it will be used to sign the JSPWiki.jar file. To create
the certificate, we need to ask you for your name and a few other things.

The certificate file will be generated at: ${jks.keystore}.
You should copy this file to your container's configuration directory,
or wherever your jspwiki.policy file lives.

If something in this process goes wrong, you can simply delete
${jks.keystore} and execute this target again... no harm done.
To automate the JAR signing processs, you can add the property
'jks.password' to your build.properties file.
    </echo>
    <input message="Your name (example: Simon Bar Sinister):" addproperty="jks.cn" />
    <input message="Your organization (example: ecyrd.com):" addproperty="jks.o" />
    <input message="Your country (example: US, FI, AU):" addproperty="jks.c" />
    <input message="Keystore password (>6 characters):" addproperty="jks.password" />
    <exec dir="${basedir}" executable="keytool" failonerror="true">
      <arg value="-genkey"/>
      <arg value="-keysize"/>
      <arg value="1024"/>
      <arg value="-alias"/>
      <arg value="${jks.alias}"/>
      <arg value="-keystore"/>
      <arg value="${jks.keystore}"/>
      <arg value="-storepass"/>
      <arg value="${jks.password}"/>
      <arg value="-dname"/>
      <arg value="cn=${jks.cn}, ou=JSPWiki Code Signing Division, o=${jks.o}, c=${jks.c}"/>
    </exec>
  </target>

  <target name="jks-password" unless="jks.password">
    <input message="Keystore password:" addproperty="jks.password" />
  </target>

  <macrodef name="sign-jar">
     <attribute name="jar"/>
     <sequential>
        <echo message="Signing code with this certificate: ${jks.keystore}" />
        <exec dir="${basedir}" executable="keytool" failonerror="true">
           <arg value="-list"/>
           <arg value="-v"/>
           <arg value="-alias"/>
           <arg value="${jks.alias}"/>
           <arg value="-keystore"/>
           <arg value="${jks.keystore}"/>
           <arg value="-storepass"/>
           <arg value="${jks.password}"/>
        </exec>
        <signjar jar="@{jar}" alias="jspwiki" keystore="${jks.keystore}"
        storepass="${jks.password}" verbose="false"/>
     </sequential>
  </macrodef>

</project>
